
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000de2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  00000de2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2b  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000733  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000359d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 32       	cpi	r26, 0x2A	; 42
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 42 05 	call	0xa84	; 0xa84 <main>
  88:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SCH_Dispatch_Tasks>:
uint8_t input;

void Do_X(void)
{
	i = i + 1;
}
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	19 82       	std	Y+1, r1	; 0x01
  9c:	75 c0       	rjmp	.+234    	; 0x188 <SCH_Dispatch_Tasks+0xf8>
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	c9 01       	movw	r24, r18
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	82 1b       	sub	r24, r18
  b4:	93 0b       	sbc	r25, r19
  b6:	89 5f       	subi	r24, 0xF9	; 249
  b8:	9e 4f       	sbci	r25, 0xFE	; 254
  ba:	fc 01       	movw	r30, r24
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	09 f4       	brne	.+2      	; 0xc4 <SCH_Dispatch_Tasks+0x34>
  c2:	5f c0       	rjmp	.+190    	; 0x182 <SCH_Dispatch_Tasks+0xf2>
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	28 2f       	mov	r18, r24
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	c9 01       	movw	r24, r18
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	82 1b       	sub	r24, r18
  da:	93 0b       	sbc	r25, r19
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	9e 4f       	sbci	r25, 0xFE	; 254
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	89 2b       	or	r24, r25
  e8:	09 f4       	brne	.+2      	; 0xec <SCH_Dispatch_Tasks+0x5c>
  ea:	4b c0       	rjmp	.+150    	; 0x182 <SCH_Dispatch_Tasks+0xf2>
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	c9 01       	movw	r24, r18
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	82 1b       	sub	r24, r18
 102:	93 0b       	sbc	r25, r19
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	9e 4f       	sbci	r25, 0xFE	; 254
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	fc 01       	movw	r30, r24
 110:	09 95       	icall
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	48 2f       	mov	r20, r24
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	ca 01       	movw	r24, r20
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	84 1b       	sub	r24, r20
 12e:	95 0b       	sbc	r25, r21
 130:	89 5f       	subi	r24, 0xF9	; 249
 132:	9e 4f       	sbci	r25, 0xFE	; 254
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	4f ef       	ldi	r20, 0xFF	; 255
 13a:	48 0f       	add	r20, r24
 13c:	c9 01       	movw	r24, r18
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	82 1b       	sub	r24, r18
 14c:	93 0b       	sbc	r25, r19
 14e:	89 5f       	subi	r24, 0xF9	; 249
 150:	9e 4f       	sbci	r25, 0xFE	; 254
 152:	fc 01       	movw	r30, r24
 154:	40 83       	st	Z, r20
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	c9 01       	movw	r24, r18
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	82 1b       	sub	r24, r18
 16c:	93 0b       	sbc	r25, r19
 16e:	8b 5f       	subi	r24, 0xFB	; 251
 170:	9e 4f       	sbci	r25, 0xFE	; 254
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	89 2b       	or	r24, r25
 17a:	19 f4       	brne	.+6      	; 0x182 <SCH_Dispatch_Tasks+0xf2>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCH_Delete_Task>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	89 83       	std	Y+1, r24	; 0x01
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	08 f4       	brcc	.+2      	; 0x190 <SCH_Dispatch_Tasks+0x100>
 18e:	87 cf       	rjmp	.-242    	; 0x9e <SCH_Dispatch_Tasks+0xe>
 190:	00 00       	nop
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <SCH_Add_Task>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	27 97       	sbiw	r28, 0x07	; 7
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	9b 83       	std	Y+3, r25	; 0x03
 1b0:	8a 83       	std	Y+2, r24	; 0x02
 1b2:	7d 83       	std	Y+5, r23	; 0x05
 1b4:	6c 83       	std	Y+4, r22	; 0x04
 1b6:	5f 83       	std	Y+7, r21	; 0x07
 1b8:	4e 83       	std	Y+6, r20	; 0x06
 1ba:	19 82       	std	Y+1, r1	; 0x01
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <SCH_Add_Task+0x2a>
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	c9 01       	movw	r24, r18
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	82 1b       	sub	r24, r18
 1da:	93 0b       	sbc	r25, r19
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	9e 4f       	sbci	r25, 0xFE	; 254
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	89 2b       	or	r24, r25
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <SCH_Add_Task+0x56>
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	85 30       	cpi	r24, 0x05	; 5
 1ee:	38 f3       	brcs	.-50     	; 0x1be <SCH_Add_Task+0x24>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	85 30       	cpi	r24, 0x05	; 5
 1f4:	11 f4       	brne	.+4      	; 0x1fa <SCH_Add_Task+0x60>
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	4a c0       	rjmp	.+148    	; 0x28e <SCH_Add_Task+0xf4>
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	c9 01       	movw	r24, r18
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	82 1b       	sub	r24, r18
 210:	93 0b       	sbc	r25, r19
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	9e 4f       	sbci	r25, 0xFE	; 254
 216:	2a 81       	ldd	r18, Y+2	; 0x02
 218:	3b 81       	ldd	r19, Y+3	; 0x03
 21a:	fc 01       	movw	r30, r24
 21c:	31 83       	std	Z+1, r19	; 0x01
 21e:	20 83       	st	Z, r18
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	c9 01       	movw	r24, r18
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	82 1b       	sub	r24, r18
 236:	93 0b       	sbc	r25, r19
 238:	8d 5f       	subi	r24, 0xFD	; 253
 23a:	9e 4f       	sbci	r25, 0xFE	; 254
 23c:	2c 81       	ldd	r18, Y+4	; 0x04
 23e:	3d 81       	ldd	r19, Y+5	; 0x05
 240:	fc 01       	movw	r30, r24
 242:	31 83       	std	Z+1, r19	; 0x01
 244:	20 83       	st	Z, r18
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	c9 01       	movw	r24, r18
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	82 1b       	sub	r24, r18
 25c:	93 0b       	sbc	r25, r19
 25e:	8b 5f       	subi	r24, 0xFB	; 251
 260:	9e 4f       	sbci	r25, 0xFE	; 254
 262:	2e 81       	ldd	r18, Y+6	; 0x06
 264:	3f 81       	ldd	r19, Y+7	; 0x07
 266:	fc 01       	movw	r30, r24
 268:	31 83       	std	Z+1, r19	; 0x01
 26a:	20 83       	st	Z, r18
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	c9 01       	movw	r24, r18
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	82 1b       	sub	r24, r18
 282:	93 0b       	sbc	r25, r19
 284:	89 5f       	subi	r24, 0xF9	; 249
 286:	9e 4f       	sbci	r25, 0xFE	; 254
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	27 96       	adiw	r28, 0x07	; 7
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <SCH_Delete_Task>:
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <SCH_Delete_Task+0x6>
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	8a 83       	std	Y+2, r24	; 0x02
 2ac:	19 82       	std	Y+1, r1	; 0x01
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	c9 01       	movw	r24, r18
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	82 1b       	sub	r24, r18
 2c4:	93 0b       	sbc	r25, r19
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	9e 4f       	sbci	r25, 0xFE	; 254
 2ca:	fc 01       	movw	r30, r24
 2cc:	11 82       	std	Z+1, r1	; 0x01
 2ce:	10 82       	st	Z, r1
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	c9 01       	movw	r24, r18
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	82 1b       	sub	r24, r18
 2e6:	93 0b       	sbc	r25, r19
 2e8:	8d 5f       	subi	r24, 0xFD	; 253
 2ea:	9e 4f       	sbci	r25, 0xFE	; 254
 2ec:	fc 01       	movw	r30, r24
 2ee:	11 82       	std	Z+1, r1	; 0x01
 2f0:	10 82       	st	Z, r1
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	c9 01       	movw	r24, r18
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	82 1b       	sub	r24, r18
 308:	93 0b       	sbc	r25, r19
 30a:	8b 5f       	subi	r24, 0xFB	; 251
 30c:	9e 4f       	sbci	r25, 0xFE	; 254
 30e:	fc 01       	movw	r30, r24
 310:	11 82       	std	Z+1, r1	; 0x01
 312:	10 82       	st	Z, r1
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	c9 01       	movw	r24, r18
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	82 1b       	sub	r24, r18
 32a:	93 0b       	sbc	r25, r19
 32c:	89 5f       	subi	r24, 0xF9	; 249
 32e:	9e 4f       	sbci	r25, 0xFE	; 254
 330:	fc 01       	movw	r30, r24
 332:	10 82       	st	Z, r1
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <SCH_Init_T1>:
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	1f 92       	push	r1
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	19 82       	std	Y+1, r1	; 0x01
 34c:	06 c0       	rjmp	.+12     	; 0x35a <SCH_Init_T1+0x1a>
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCH_Delete_Task>
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	85 30       	cpi	r24, 0x05	; 5
 35e:	b8 f3       	brcs	.-18     	; 0x34e <SCH_Init_T1+0xe>
 360:	88 e8       	ldi	r24, 0x88	; 136
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	21 e7       	ldi	r18, 0x71	; 113
 366:	32 e0       	ldi	r19, 0x02	; 2
 368:	fc 01       	movw	r30, r24
 36a:	31 83       	std	Z+1, r19	; 0x01
 36c:	20 83       	st	Z, r18
 36e:	81 e8       	ldi	r24, 0x81	; 129
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	2c e0       	ldi	r18, 0x0C	; 12
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
 378:	8f e6       	ldi	r24, 0x6F	; 111
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	22 e0       	ldi	r18, 0x02	; 2
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
 382:	00 00       	nop
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <SCH_Start>:
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	78 94       	sei
 396:	00 00       	nop
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <__vector_11>:
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	1f 92       	push	r1
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	19 82       	std	Y+1, r1	; 0x01
 3c6:	ce c0       	rjmp	.+412    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	c9 01       	movw	r24, r18
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 1b       	sub	r24, r18
 3de:	93 0b       	sbc	r25, r19
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	9e 4f       	sbci	r25, 0xFE	; 254
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	89 2b       	or	r24, r25
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <__vector_11+0x52>
 3ee:	b7 c0       	rjmp	.+366    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	c9 01       	movw	r24, r18
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	82 1b       	sub	r24, r18
 406:	93 0b       	sbc	r25, r19
 408:	8d 5f       	subi	r24, 0xFD	; 253
 40a:	9e 4f       	sbci	r25, 0xFE	; 254
 40c:	fc 01       	movw	r30, r24
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	89 2b       	or	r24, r25
 414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	7e c0       	rjmp	.+252    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	48 2f       	mov	r20, r24
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	ca 01       	movw	r24, r20
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	84 1b       	sub	r24, r20
 434:	95 0b       	sbc	r25, r21
 436:	89 5f       	subi	r24, 0xF9	; 249
 438:	9e 4f       	sbci	r25, 0xFE	; 254
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	48 0f       	add	r20, r24
 442:	c9 01       	movw	r24, r18
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	82 1b       	sub	r24, r18
 452:	93 0b       	sbc	r25, r19
 454:	89 5f       	subi	r24, 0xF9	; 249
 456:	9e 4f       	sbci	r25, 0xFE	; 254
 458:	fc 01       	movw	r30, r24
 45a:	40 83       	st	Z, r20
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	c9 01       	movw	r24, r18
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	82 1b       	sub	r24, r18
 472:	93 0b       	sbc	r25, r19
 474:	8b 5f       	subi	r24, 0xFB	; 251
 476:	9e 4f       	sbci	r25, 0xFE	; 254
 478:	fc 01       	movw	r30, r24
 47a:	80 81       	ld	r24, Z
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	89 2b       	or	r24, r25
 480:	09 f4       	brne	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	6d c0       	rjmp	.+218    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	48 2f       	mov	r20, r24
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	ca 01       	movw	r24, r20
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	84 1b       	sub	r24, r20
 4a0:	95 0b       	sbc	r25, r21
 4a2:	8b 5f       	subi	r24, 0xFB	; 251
 4a4:	9e 4f       	sbci	r25, 0xFE	; 254
 4a6:	fc 01       	movw	r30, r24
 4a8:	40 81       	ld	r20, Z
 4aa:	51 81       	ldd	r21, Z+1	; 0x01
 4ac:	c9 01       	movw	r24, r18
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	82 1b       	sub	r24, r18
 4bc:	93 0b       	sbc	r25, r19
 4be:	8d 5f       	subi	r24, 0xFD	; 253
 4c0:	9e 4f       	sbci	r25, 0xFE	; 254
 4c2:	fc 01       	movw	r30, r24
 4c4:	51 83       	std	Z+1, r21	; 0x01
 4c6:	40 83       	st	Z, r20
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	48 2f       	mov	r20, r24
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	ca 01       	movw	r24, r20
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	84 1b       	sub	r24, r20
 4e4:	95 0b       	sbc	r25, r21
 4e6:	8d 5f       	subi	r24, 0xFD	; 253
 4e8:	9e 4f       	sbci	r25, 0xFE	; 254
 4ea:	fc 01       	movw	r30, r24
 4ec:	80 81       	ld	r24, Z
 4ee:	91 81       	ldd	r25, Z+1	; 0x01
 4f0:	ac 01       	movw	r20, r24
 4f2:	41 50       	subi	r20, 0x01	; 1
 4f4:	51 09       	sbc	r21, r1
 4f6:	c9 01       	movw	r24, r18
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	82 1b       	sub	r24, r18
 506:	93 0b       	sbc	r25, r19
 508:	8d 5f       	subi	r24, 0xFD	; 253
 50a:	9e 4f       	sbci	r25, 0xFE	; 254
 50c:	fc 01       	movw	r30, r24
 50e:	51 83       	std	Z+1, r21	; 0x01
 510:	40 83       	st	Z, r20
 512:	25 c0       	rjmp	.+74     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	48 2f       	mov	r20, r24
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	ca 01       	movw	r24, r20
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	84 1b       	sub	r24, r20
 530:	95 0b       	sbc	r25, r21
 532:	8d 5f       	subi	r24, 0xFD	; 253
 534:	9e 4f       	sbci	r25, 0xFE	; 254
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	ac 01       	movw	r20, r24
 53e:	41 50       	subi	r20, 0x01	; 1
 540:	51 09       	sbc	r21, r1
 542:	c9 01       	movw	r24, r18
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	82 1b       	sub	r24, r18
 552:	93 0b       	sbc	r25, r19
 554:	8d 5f       	subi	r24, 0xFD	; 253
 556:	9e 4f       	sbci	r25, 0xFE	; 254
 558:	fc 01       	movw	r30, r24
 55a:	51 83       	std	Z+1, r21	; 0x01
 55c:	40 83       	st	Z, r20
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	85 30       	cpi	r24, 0x05	; 5
 568:	08 f4       	brcc	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56a:	2e cf       	rjmp	.-420    	; 0x3c8 <__vector_11+0x2a>
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <extendSunscreen>:

void extendSunscreen(void) {
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	6d 97       	sbiw	r28, 0x1d	; 29
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
     * Er moet een motortje runnen tot de gekozen lengte.
     * Het scherm mag niet verder uit staan dan de maximale lengte.
     * Omdat wij geen motor hebben moeten we dit indiceren met een LEDje.
     */

	if (CurrentExtend  < MaxExtend) {
 5a4:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <CurrentExtend>
 5a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 5ac:	98 17       	cp	r25, r24
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <extendSunscreen+0x22>
 5b0:	ff c0       	rjmp	.+510    	; 0x7b0 <extendSunscreen+0x220>
		for(uint8_t i = CurrentExtend; i < MaxExtend; i++) {
 5b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <CurrentExtend>
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	f5 c0       	rjmp	.+490    	; 0x7a4 <extendSunscreen+0x214>
			CurrentExtend++;
 5ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <CurrentExtend>
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <CurrentExtend>
			PORTD = 0b00001000;
 5c4:	8b e2       	ldi	r24, 0x2B	; 43
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	28 e0       	ldi	r18, 0x08	; 8
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	aa ef       	ldi	r26, 0xFA	; 250
 5d4:	b3 e4       	ldi	r27, 0x43	; 67
 5d6:	8a 83       	std	Y+2, r24	; 0x02
 5d8:	9b 83       	std	Y+3, r25	; 0x03
 5da:	ac 83       	std	Y+4, r26	; 0x04
 5dc:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	4a e7       	ldi	r20, 0x7A	; 122
 5e4:	53 e4       	ldi	r21, 0x43	; 67
 5e6:	6a 81       	ldd	r22, Y+2	; 0x02
 5e8:	7b 81       	ldd	r23, Y+3	; 0x03
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 5f2:	dc 01       	movw	r26, r24
 5f4:	cb 01       	movw	r24, r22
 5f6:	8c 8b       	std	Y+20, r24	; 0x14
 5f8:	9d 8b       	std	Y+21, r25	; 0x15
 5fa:	ae 8b       	std	Y+22, r26	; 0x16
 5fc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	40 e8       	ldi	r20, 0x80	; 128
 604:	5f e3       	ldi	r21, 0x3F	; 63
 606:	6c 89       	ldd	r22, Y+20	; 0x14
 608:	7d 89       	ldd	r23, Y+21	; 0x15
 60a:	8e 89       	ldd	r24, Y+22	; 0x16
 60c:	9f 89       	ldd	r25, Y+23	; 0x17
 60e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 612:	88 23       	and	r24, r24
 614:	2c f4       	brge	.+10     	; 0x620 <extendSunscreen+0x90>
		__ticks = 1;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	99 8f       	std	Y+25, r25	; 0x19
 61c:	88 8f       	std	Y+24, r24	; 0x18
 61e:	3f c0       	rjmp	.+126    	; 0x69e <extendSunscreen+0x10e>
	else if (__tmp > 65535)
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	3f ef       	ldi	r19, 0xFF	; 255
 624:	4f e7       	ldi	r20, 0x7F	; 127
 626:	57 e4       	ldi	r21, 0x47	; 71
 628:	6c 89       	ldd	r22, Y+20	; 0x14
 62a:	7d 89       	ldd	r23, Y+21	; 0x15
 62c:	8e 89       	ldd	r24, Y+22	; 0x16
 62e:	9f 89       	ldd	r25, Y+23	; 0x17
 630:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 634:	18 16       	cp	r1, r24
 636:	4c f5       	brge	.+82     	; 0x68a <extendSunscreen+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	40 e2       	ldi	r20, 0x20	; 32
 63e:	51 e4       	ldi	r21, 0x41	; 65
 640:	6a 81       	ldd	r22, Y+2	; 0x02
 642:	7b 81       	ldd	r23, Y+3	; 0x03
 644:	8c 81       	ldd	r24, Y+4	; 0x04
 646:	9d 81       	ldd	r25, Y+5	; 0x05
 648:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 64c:	dc 01       	movw	r26, r24
 64e:	cb 01       	movw	r24, r22
 650:	bc 01       	movw	r22, r24
 652:	cd 01       	movw	r24, r26
 654:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 658:	dc 01       	movw	r26, r24
 65a:	cb 01       	movw	r24, r22
 65c:	99 8f       	std	Y+25, r25	; 0x19
 65e:	88 8f       	std	Y+24, r24	; 0x18
 660:	0f c0       	rjmp	.+30     	; 0x680 <extendSunscreen+0xf0>
 662:	89 e1       	ldi	r24, 0x19	; 25
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	9b 8f       	std	Y+27, r25	; 0x1b
 668:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 66a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 66c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <extendSunscreen+0xde>
 672:	9b 8f       	std	Y+27, r25	; 0x1b
 674:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 676:	88 8d       	ldd	r24, Y+24	; 0x18
 678:	99 8d       	ldd	r25, Y+25	; 0x19
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	99 8f       	std	Y+25, r25	; 0x19
 67e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 680:	88 8d       	ldd	r24, Y+24	; 0x18
 682:	99 8d       	ldd	r25, Y+25	; 0x19
 684:	89 2b       	or	r24, r25
 686:	69 f7       	brne	.-38     	; 0x662 <extendSunscreen+0xd2>
 688:	14 c0       	rjmp	.+40     	; 0x6b2 <extendSunscreen+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 68a:	6c 89       	ldd	r22, Y+20	; 0x14
 68c:	7d 89       	ldd	r23, Y+21	; 0x15
 68e:	8e 89       	ldd	r24, Y+22	; 0x16
 690:	9f 89       	ldd	r25, Y+23	; 0x17
 692:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	99 8f       	std	Y+25, r25	; 0x19
 69c:	88 8f       	std	Y+24, r24	; 0x18
 69e:	88 8d       	ldd	r24, Y+24	; 0x18
 6a0:	99 8d       	ldd	r25, Y+25	; 0x19
 6a2:	9d 8f       	std	Y+29, r25	; 0x1d
 6a4:	8c 8f       	std	Y+28, r24	; 0x1c
 6a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <extendSunscreen+0x11a>
 6ae:	9d 8f       	std	Y+29, r25	; 0x1d
 6b0:	8c 8f       	std	Y+28, r24	; 0x1c
			_delay_ms(500); // "Expanding delay"
			PORTD = 0b00000000;
 6b2:	8b e2       	ldi	r24, 0x2B	; 43
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	fc 01       	movw	r30, r24
 6b8:	10 82       	st	Z, r1
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	aa ef       	ldi	r26, 0xFA	; 250
 6c0:	b3 e4       	ldi	r27, 0x43	; 67
 6c2:	8e 83       	std	Y+6, r24	; 0x06
 6c4:	9f 83       	std	Y+7, r25	; 0x07
 6c6:	a8 87       	std	Y+8, r26	; 0x08
 6c8:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	4a e7       	ldi	r20, 0x7A	; 122
 6d0:	53 e4       	ldi	r21, 0x43	; 67
 6d2:	6e 81       	ldd	r22, Y+6	; 0x06
 6d4:	7f 81       	ldd	r23, Y+7	; 0x07
 6d6:	88 85       	ldd	r24, Y+8	; 0x08
 6d8:	99 85       	ldd	r25, Y+9	; 0x09
 6da:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 6de:	dc 01       	movw	r26, r24
 6e0:	cb 01       	movw	r24, r22
 6e2:	8a 87       	std	Y+10, r24	; 0x0a
 6e4:	9b 87       	std	Y+11, r25	; 0x0b
 6e6:	ac 87       	std	Y+12, r26	; 0x0c
 6e8:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	40 e8       	ldi	r20, 0x80	; 128
 6f0:	5f e3       	ldi	r21, 0x3F	; 63
 6f2:	6a 85       	ldd	r22, Y+10	; 0x0a
 6f4:	7b 85       	ldd	r23, Y+11	; 0x0b
 6f6:	8c 85       	ldd	r24, Y+12	; 0x0c
 6f8:	9d 85       	ldd	r25, Y+13	; 0x0d
 6fa:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 6fe:	88 23       	and	r24, r24
 700:	2c f4       	brge	.+10     	; 0x70c <extendSunscreen+0x17c>
		__ticks = 1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	9f 87       	std	Y+15, r25	; 0x0f
 708:	8e 87       	std	Y+14, r24	; 0x0e
 70a:	3f c0       	rjmp	.+126    	; 0x78a <extendSunscreen+0x1fa>
	else if (__tmp > 65535)
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	3f ef       	ldi	r19, 0xFF	; 255
 710:	4f e7       	ldi	r20, 0x7F	; 127
 712:	57 e4       	ldi	r21, 0x47	; 71
 714:	6a 85       	ldd	r22, Y+10	; 0x0a
 716:	7b 85       	ldd	r23, Y+11	; 0x0b
 718:	8c 85       	ldd	r24, Y+12	; 0x0c
 71a:	9d 85       	ldd	r25, Y+13	; 0x0d
 71c:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 720:	18 16       	cp	r1, r24
 722:	4c f5       	brge	.+82     	; 0x776 <extendSunscreen+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	40 e2       	ldi	r20, 0x20	; 32
 72a:	51 e4       	ldi	r21, 0x41	; 65
 72c:	6e 81       	ldd	r22, Y+6	; 0x06
 72e:	7f 81       	ldd	r23, Y+7	; 0x07
 730:	88 85       	ldd	r24, Y+8	; 0x08
 732:	99 85       	ldd	r25, Y+9	; 0x09
 734:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 738:	dc 01       	movw	r26, r24
 73a:	cb 01       	movw	r24, r22
 73c:	bc 01       	movw	r22, r24
 73e:	cd 01       	movw	r24, r26
 740:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 744:	dc 01       	movw	r26, r24
 746:	cb 01       	movw	r24, r22
 748:	9f 87       	std	Y+15, r25	; 0x0f
 74a:	8e 87       	std	Y+14, r24	; 0x0e
 74c:	0f c0       	rjmp	.+30     	; 0x76c <extendSunscreen+0x1dc>
 74e:	89 e1       	ldi	r24, 0x19	; 25
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	99 8b       	std	Y+17, r25	; 0x11
 754:	88 8b       	std	Y+16, r24	; 0x10
 756:	88 89       	ldd	r24, Y+16	; 0x10
 758:	99 89       	ldd	r25, Y+17	; 0x11
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <extendSunscreen+0x1ca>
 75e:	99 8b       	std	Y+17, r25	; 0x11
 760:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 762:	8e 85       	ldd	r24, Y+14	; 0x0e
 764:	9f 85       	ldd	r25, Y+15	; 0x0f
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	9f 87       	std	Y+15, r25	; 0x0f
 76a:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 76c:	8e 85       	ldd	r24, Y+14	; 0x0e
 76e:	9f 85       	ldd	r25, Y+15	; 0x0f
 770:	89 2b       	or	r24, r25
 772:	69 f7       	brne	.-38     	; 0x74e <extendSunscreen+0x1be>
 774:	14 c0       	rjmp	.+40     	; 0x79e <extendSunscreen+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 776:	6a 85       	ldd	r22, Y+10	; 0x0a
 778:	7b 85       	ldd	r23, Y+11	; 0x0b
 77a:	8c 85       	ldd	r24, Y+12	; 0x0c
 77c:	9d 85       	ldd	r25, Y+13	; 0x0d
 77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 782:	dc 01       	movw	r26, r24
 784:	cb 01       	movw	r24, r22
 786:	9f 87       	std	Y+15, r25	; 0x0f
 788:	8e 87       	std	Y+14, r24	; 0x0e
 78a:	8e 85       	ldd	r24, Y+14	; 0x0e
 78c:	9f 85       	ldd	r25, Y+15	; 0x0f
 78e:	9b 8b       	std	Y+19, r25	; 0x13
 790:	8a 8b       	std	Y+18, r24	; 0x12
 792:	8a 89       	ldd	r24, Y+18	; 0x12
 794:	9b 89       	ldd	r25, Y+19	; 0x13
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <extendSunscreen+0x206>
 79a:	9b 8b       	std	Y+19, r25	; 0x13
 79c:	8a 8b       	std	Y+18, r24	; 0x12
     * Het scherm mag niet verder uit staan dan de maximale lengte.
     * Omdat wij geen motor hebben moeten we dit indiceren met een LEDje.
     */

	if (CurrentExtend  < MaxExtend) {
		for(uint8_t i = CurrentExtend; i < MaxExtend; i++) {
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	8f 5f       	subi	r24, 0xFF	; 255
 7a2:	89 83       	std	Y+1, r24	; 0x01
 7a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 7a8:	99 81       	ldd	r25, Y+1	; 0x01
 7aa:	98 17       	cp	r25, r24
 7ac:	08 f4       	brcc	.+2      	; 0x7b0 <extendSunscreen+0x220>
 7ae:	05 cf       	rjmp	.-502    	; 0x5ba <extendSunscreen+0x2a>
			_delay_ms(500); // "Expanding delay"

			// TODO if Ultrasone sensor too far, stop extend!
		}
	}
	PORTD = 0b00000100; // Max extended. Green!
 7b0:	8b e2       	ldi	r24, 0x2B	; 43
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	24 e0       	ldi	r18, 0x04	; 4
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
}
 7ba:	00 00       	nop
 7bc:	6d 96       	adiw	r28, 0x1d	; 29
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <withdrawSunscreen>:

void withdrawSunscreen(void) {
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	6d 97       	sbiw	r28, 0x1d	; 29
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
    /* Deze functie trekt het zonnescherm terug.
     * Er moet een motortje runnen tot de gekozen lengte.
     * Het scherm mag niet verder terug getrokken worden dan 0.
     * Omdat wij geen motor hebben moeten we dit indiceren met een LEDje.
     */
	if (CurrentExtend > MinExtend) {
 7e2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <CurrentExtend>
 7e6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <MinExtend>
 7ea:	89 17       	cp	r24, r25
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <withdrawSunscreen+0x22>
 7ee:	ff c0       	rjmp	.+510    	; 0x9ee <__stack+0xef>
		for(uint8_t i = CurrentExtend; MinExtend < i; i--) {
 7f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <CurrentExtend>
 7f4:	89 83       	std	Y+1, r24	; 0x01
 7f6:	f5 c0       	rjmp	.+490    	; 0x9e2 <__stack+0xe3>
			CurrentExtend--;
 7f8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <CurrentExtend>
 7fc:	81 50       	subi	r24, 0x01	; 1
 7fe:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <CurrentExtend>
			PORTD = 0b00001000;
 802:	8b e2       	ldi	r24, 0x2B	; 43
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	28 e0       	ldi	r18, 0x08	; 8
 808:	fc 01       	movw	r30, r24
 80a:	20 83       	st	Z, r18
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	aa ef       	ldi	r26, 0xFA	; 250
 812:	b3 e4       	ldi	r27, 0x43	; 67
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	9b 83       	std	Y+3, r25	; 0x03
 818:	ac 83       	std	Y+4, r26	; 0x04
 81a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	4a e7       	ldi	r20, 0x7A	; 122
 822:	53 e4       	ldi	r21, 0x43	; 67
 824:	6a 81       	ldd	r22, Y+2	; 0x02
 826:	7b 81       	ldd	r23, Y+3	; 0x03
 828:	8c 81       	ldd	r24, Y+4	; 0x04
 82a:	9d 81       	ldd	r25, Y+5	; 0x05
 82c:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 830:	dc 01       	movw	r26, r24
 832:	cb 01       	movw	r24, r22
 834:	8c 8b       	std	Y+20, r24	; 0x14
 836:	9d 8b       	std	Y+21, r25	; 0x15
 838:	ae 8b       	std	Y+22, r26	; 0x16
 83a:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	40 e8       	ldi	r20, 0x80	; 128
 842:	5f e3       	ldi	r21, 0x3F	; 63
 844:	6c 89       	ldd	r22, Y+20	; 0x14
 846:	7d 89       	ldd	r23, Y+21	; 0x15
 848:	8e 89       	ldd	r24, Y+22	; 0x16
 84a:	9f 89       	ldd	r25, Y+23	; 0x17
 84c:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 850:	88 23       	and	r24, r24
 852:	2c f4       	brge	.+10     	; 0x85e <withdrawSunscreen+0x90>
		__ticks = 1;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	99 8f       	std	Y+25, r25	; 0x19
 85a:	88 8f       	std	Y+24, r24	; 0x18
 85c:	3f c0       	rjmp	.+126    	; 0x8dc <withdrawSunscreen+0x10e>
	else if (__tmp > 65535)
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	3f ef       	ldi	r19, 0xFF	; 255
 862:	4f e7       	ldi	r20, 0x7F	; 127
 864:	57 e4       	ldi	r21, 0x47	; 71
 866:	6c 89       	ldd	r22, Y+20	; 0x14
 868:	7d 89       	ldd	r23, Y+21	; 0x15
 86a:	8e 89       	ldd	r24, Y+22	; 0x16
 86c:	9f 89       	ldd	r25, Y+23	; 0x17
 86e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 872:	18 16       	cp	r1, r24
 874:	4c f5       	brge	.+82     	; 0x8c8 <withdrawSunscreen+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 876:	20 e0       	ldi	r18, 0x00	; 0
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	40 e2       	ldi	r20, 0x20	; 32
 87c:	51 e4       	ldi	r21, 0x41	; 65
 87e:	6a 81       	ldd	r22, Y+2	; 0x02
 880:	7b 81       	ldd	r23, Y+3	; 0x03
 882:	8c 81       	ldd	r24, Y+4	; 0x04
 884:	9d 81       	ldd	r25, Y+5	; 0x05
 886:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 88a:	dc 01       	movw	r26, r24
 88c:	cb 01       	movw	r24, r22
 88e:	bc 01       	movw	r22, r24
 890:	cd 01       	movw	r24, r26
 892:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 896:	dc 01       	movw	r26, r24
 898:	cb 01       	movw	r24, r22
 89a:	99 8f       	std	Y+25, r25	; 0x19
 89c:	88 8f       	std	Y+24, r24	; 0x18
 89e:	0f c0       	rjmp	.+30     	; 0x8be <withdrawSunscreen+0xf0>
 8a0:	89 e1       	ldi	r24, 0x19	; 25
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	9b 8f       	std	Y+27, r25	; 0x1b
 8a6:	8a 8f       	std	Y+26, r24	; 0x1a
 8a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
 8aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <withdrawSunscreen+0xde>
 8b0:	9b 8f       	std	Y+27, r25	; 0x1b
 8b2:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8b4:	88 8d       	ldd	r24, Y+24	; 0x18
 8b6:	99 8d       	ldd	r25, Y+25	; 0x19
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	99 8f       	std	Y+25, r25	; 0x19
 8bc:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8be:	88 8d       	ldd	r24, Y+24	; 0x18
 8c0:	99 8d       	ldd	r25, Y+25	; 0x19
 8c2:	89 2b       	or	r24, r25
 8c4:	69 f7       	brne	.-38     	; 0x8a0 <withdrawSunscreen+0xd2>
 8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <withdrawSunscreen+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8c8:	6c 89       	ldd	r22, Y+20	; 0x14
 8ca:	7d 89       	ldd	r23, Y+21	; 0x15
 8cc:	8e 89       	ldd	r24, Y+22	; 0x16
 8ce:	9f 89       	ldd	r25, Y+23	; 0x17
 8d0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 8d4:	dc 01       	movw	r26, r24
 8d6:	cb 01       	movw	r24, r22
 8d8:	99 8f       	std	Y+25, r25	; 0x19
 8da:	88 8f       	std	Y+24, r24	; 0x18
 8dc:	88 8d       	ldd	r24, Y+24	; 0x18
 8de:	99 8d       	ldd	r25, Y+25	; 0x19
 8e0:	9d 8f       	std	Y+29, r25	; 0x1d
 8e2:	8c 8f       	std	Y+28, r24	; 0x1c
 8e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 8e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <withdrawSunscreen+0x11a>
 8ec:	9d 8f       	std	Y+29, r25	; 0x1d
 8ee:	8c 8f       	std	Y+28, r24	; 0x1c
			_delay_ms(500); // "Expanding delay"
			PORTD = 0b00000000;
 8f0:	8b e2       	ldi	r24, 0x2B	; 43
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	fc 01       	movw	r30, r24
 8f6:	10 82       	st	Z, r1
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	aa ef       	ldi	r26, 0xFA	; 250
 8fe:	b3 e4       	ldi	r27, 0x43	; 67
 900:	8e 83       	std	Y+6, r24	; 0x06
 902:	9f 83       	std	Y+7, r25	; 0x07
 904:	a8 87       	std	Y+8, r26	; 0x08
 906:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	4a e7       	ldi	r20, 0x7A	; 122
 90e:	53 e4       	ldi	r21, 0x43	; 67
 910:	6e 81       	ldd	r22, Y+6	; 0x06
 912:	7f 81       	ldd	r23, Y+7	; 0x07
 914:	88 85       	ldd	r24, Y+8	; 0x08
 916:	99 85       	ldd	r25, Y+9	; 0x09
 918:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 91c:	dc 01       	movw	r26, r24
 91e:	cb 01       	movw	r24, r22
 920:	8a 87       	std	Y+10, r24	; 0x0a
 922:	9b 87       	std	Y+11, r25	; 0x0b
 924:	ac 87       	std	Y+12, r26	; 0x0c
 926:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 928:	20 e0       	ldi	r18, 0x00	; 0
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	40 e8       	ldi	r20, 0x80	; 128
 92e:	5f e3       	ldi	r21, 0x3F	; 63
 930:	6a 85       	ldd	r22, Y+10	; 0x0a
 932:	7b 85       	ldd	r23, Y+11	; 0x0b
 934:	8c 85       	ldd	r24, Y+12	; 0x0c
 936:	9d 85       	ldd	r25, Y+13	; 0x0d
 938:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 93c:	88 23       	and	r24, r24
 93e:	2c f4       	brge	.+10     	; 0x94a <__stack+0x4b>
		__ticks = 1;
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	9f 87       	std	Y+15, r25	; 0x0f
 946:	8e 87       	std	Y+14, r24	; 0x0e
 948:	3f c0       	rjmp	.+126    	; 0x9c8 <__stack+0xc9>
	else if (__tmp > 65535)
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	3f ef       	ldi	r19, 0xFF	; 255
 94e:	4f e7       	ldi	r20, 0x7F	; 127
 950:	57 e4       	ldi	r21, 0x47	; 71
 952:	6a 85       	ldd	r22, Y+10	; 0x0a
 954:	7b 85       	ldd	r23, Y+11	; 0x0b
 956:	8c 85       	ldd	r24, Y+12	; 0x0c
 958:	9d 85       	ldd	r25, Y+13	; 0x0d
 95a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__gesf2>
 95e:	18 16       	cp	r1, r24
 960:	4c f5       	brge	.+82     	; 0x9b4 <__stack+0xb5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	40 e2       	ldi	r20, 0x20	; 32
 968:	51 e4       	ldi	r21, 0x41	; 65
 96a:	6e 81       	ldd	r22, Y+6	; 0x06
 96c:	7f 81       	ldd	r23, Y+7	; 0x07
 96e:	88 85       	ldd	r24, Y+8	; 0x08
 970:	99 85       	ldd	r25, Y+9	; 0x09
 972:	0e 94 20 06 	call	0xc40	; 0xc40 <__mulsf3>
 976:	dc 01       	movw	r26, r24
 978:	cb 01       	movw	r24, r22
 97a:	bc 01       	movw	r22, r24
 97c:	cd 01       	movw	r24, r26
 97e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 982:	dc 01       	movw	r26, r24
 984:	cb 01       	movw	r24, r22
 986:	9f 87       	std	Y+15, r25	; 0x0f
 988:	8e 87       	std	Y+14, r24	; 0x0e
 98a:	0f c0       	rjmp	.+30     	; 0x9aa <__stack+0xab>
 98c:	89 e1       	ldi	r24, 0x19	; 25
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	99 8b       	std	Y+17, r25	; 0x11
 992:	88 8b       	std	Y+16, r24	; 0x10
 994:	88 89       	ldd	r24, Y+16	; 0x10
 996:	99 89       	ldd	r25, Y+17	; 0x11
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <__stack+0x99>
 99c:	99 8b       	std	Y+17, r25	; 0x11
 99e:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 9a2:	9f 85       	ldd	r25, Y+15	; 0x0f
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	9f 87       	std	Y+15, r25	; 0x0f
 9a8:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9aa:	8e 85       	ldd	r24, Y+14	; 0x0e
 9ac:	9f 85       	ldd	r25, Y+15	; 0x0f
 9ae:	89 2b       	or	r24, r25
 9b0:	69 f7       	brne	.-38     	; 0x98c <__stack+0x8d>
 9b2:	14 c0       	rjmp	.+40     	; 0x9dc <__stack+0xdd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9b4:	6a 85       	ldd	r22, Y+10	; 0x0a
 9b6:	7b 85       	ldd	r23, Y+11	; 0x0b
 9b8:	8c 85       	ldd	r24, Y+12	; 0x0c
 9ba:	9d 85       	ldd	r25, Y+13	; 0x0d
 9bc:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fixunssfsi>
 9c0:	dc 01       	movw	r26, r24
 9c2:	cb 01       	movw	r24, r22
 9c4:	9f 87       	std	Y+15, r25	; 0x0f
 9c6:	8e 87       	std	Y+14, r24	; 0x0e
 9c8:	8e 85       	ldd	r24, Y+14	; 0x0e
 9ca:	9f 85       	ldd	r25, Y+15	; 0x0f
 9cc:	9b 8b       	std	Y+19, r25	; 0x13
 9ce:	8a 8b       	std	Y+18, r24	; 0x12
 9d0:	8a 89       	ldd	r24, Y+18	; 0x12
 9d2:	9b 89       	ldd	r25, Y+19	; 0x13
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	f1 f7       	brne	.-4      	; 0x9d4 <__stack+0xd5>
 9d8:	9b 8b       	std	Y+19, r25	; 0x13
 9da:	8a 8b       	std	Y+18, r24	; 0x12
     * Er moet een motortje runnen tot de gekozen lengte.
     * Het scherm mag niet verder terug getrokken worden dan 0.
     * Omdat wij geen motor hebben moeten we dit indiceren met een LEDje.
     */
	if (CurrentExtend > MinExtend) {
		for(uint8_t i = CurrentExtend; MinExtend < i; i--) {
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	81 50       	subi	r24, 0x01	; 1
 9e0:	89 83       	std	Y+1, r24	; 0x01
 9e2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <MinExtend>
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
 9e8:	98 17       	cp	r25, r24
 9ea:	08 f4       	brcc	.+2      	; 0x9ee <__stack+0xef>
 9ec:	05 cf       	rjmp	.-502    	; 0x7f8 <withdrawSunscreen+0x2a>
			_delay_ms(500); // "Expanding delay"

			// TODO if ultrasone sensor too far back, stop extend!
		}
	}
	PORTD = 0b00010000; // Max retracted. Red!
 9ee:	8b e2       	ldi	r24, 0x2B	; 43
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	20 e1       	ldi	r18, 0x10	; 16
 9f4:	fc 01       	movw	r30, r24
 9f6:	20 83       	st	Z, r18
}
 9f8:	00 00       	nop
 9fa:	6d 96       	adiw	r28, 0x1d	; 29
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	f8 94       	cli
 a00:	de bf       	out	0x3e, r29	; 62
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	cd bf       	out	0x3d, r28	; 61
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <CheckTemp>:

void CheckTemp(void)
{
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
	int Temperature;

	changeOutput(1, 12);
 a14:	6c e0       	ldi	r22, 0x0C	; 12
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <changeOutput>
}
 a20:	00 00       	nop
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <CheckLight>:

void CheckLight(void)
{
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	cd b7       	in	r28, 0x3d	; 61
 a2e:	de b7       	in	r29, 0x3e	; 62
	int LightLevel;

	changeOutput(2, 50);
 a30:	62 e3       	ldi	r22, 0x32	; 50
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <changeOutput>
}
 a3c:	00 00       	nop
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <CheckInput>:

void CheckInput(void)
{
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	1f 92       	push	r1
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
/* Deze functie kijkt of er input klaar staat. En zet het om naar een extra return code. Deze code wordt meegenomen in de main-loop als "extra" actie. */
	uint8_t input = 0b00000000; /* TODO: READ INFO FROM PORT ON MOBO */
 a4e:	19 82       	std	Y+1, r1	; 0x01
			break;
		case '0b00000100': /* input 3: FORCE UPDATE? */
			input = 3; /* Return code for main */
			break;
		default:
			input = 0; /* No input */
 a50:	19 82       	std	Y+1, r1	; 0x01
			break;
 a52:	00 00       	nop
	}
}
 a54:	00 00       	nop
 a56:	0f 90       	pop	r0
 a58:	df 91       	pop	r29
 a5a:	cf 91       	pop	r28
 a5c:	08 95       	ret

00000a5e <changeOutput>:


void changeOutput(int type, int amount) {
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	00 d0       	rcall	.+0      	; 0xa64 <changeOutput+0x6>
 a64:	00 d0       	rcall	.+0      	; 0xa66 <changeOutput+0x8>
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
 a6a:	9a 83       	std	Y+2, r25	; 0x02
 a6c:	89 83       	std	Y+1, r24	; 0x01
 a6e:	7c 83       	std	Y+4, r23	; 0x04
 a70:	6b 83       	std	Y+3, r22	; 0x03
		case 1:
		/* output change 1: Lightlevel */
		break;
		case 2:
		/* output change 2: Temperature */
		break;
 a72:	00 00       	nop
		case 3:
		/* output change 3*/
		break;
	}
}
 a74:	00 00       	nop
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	08 95       	ret

00000a84 <main>:

int main() {
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	00 d0       	rcall	.+0      	; 0xa8a <main+0x6>
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <main+0x8>
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <main+0xa>
 a8e:	cd b7       	in	r28, 0x3d	; 61
 a90:	de b7       	in	r29, 0x3e	; 62
	i = 0;
 a92:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <i>
	CurrentExtend = 0;
 a96:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <CurrentExtend>
	MinExtend = 0;
 a9a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <MinExtend>
	MaxExtend = 20;
 a9e:	84 e1       	ldi	r24, 0x14	; 20
 aa0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	LightLevel = 0;
 aa4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <LightLevel>
	Temperature = 0;
 aa8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <Temperature>

	DDRD = 0b11111100; // Port D2 (Pin 4 in the ATmega) made output
 aac:	8a e2       	ldi	r24, 0x2A	; 42
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	2c ef       	ldi	r18, 0xFC	; 252
 ab2:	fc 01       	movw	r30, r24
 ab4:	20 83       	st	Z, r18
	PORTD = 0b00000000; // Turn LED off
 ab6:	8b e2       	ldi	r24, 0x2B	; 43
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	fc 01       	movw	r30, r24
 abc:	10 82       	st	Z, r1

	 // Setup data scheduler
	SCH_Init_T1();
 abe:	0e 94 a0 01 	call	0x340	; 0x340 <SCH_Init_T1>
	
	// 1 = 100ms
	// 10 = 1s
	// 300 = 30s
	int CheckInput_Task_ID = SCH_Add_Task(CheckInput,0,1); // Every 0.1 sec
 ac2:	41 e0       	ldi	r20, 0x01	; 1
 ac4:	50 e0       	ldi	r21, 0x00	; 0
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	82 e2       	ldi	r24, 0x22	; 34
 acc:	95 e0       	ldi	r25, 0x05	; 5
 ace:	0e 94 cd 00 	call	0x19a	; 0x19a <SCH_Add_Task>
 ad2:	88 2f       	mov	r24, r24
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	9a 83       	std	Y+2, r25	; 0x02
 ad8:	89 83       	std	Y+1, r24	; 0x01
	int CheckTemp_Task_ID = SCH_Add_Task(CheckTemp,0,400); // Every 40 sec
 ada:	40 e9       	ldi	r20, 0x90	; 144
 adc:	51 e0       	ldi	r21, 0x01	; 1
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	86 e0       	ldi	r24, 0x06	; 6
 ae4:	95 e0       	ldi	r25, 0x05	; 5
 ae6:	0e 94 cd 00 	call	0x19a	; 0x19a <SCH_Add_Task>
 aea:	88 2f       	mov	r24, r24
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	9c 83       	std	Y+4, r25	; 0x04
 af0:	8b 83       	std	Y+3, r24	; 0x03
	int CheckLight_Task_ID = SCH_Add_Task(CheckLight,0,300); // Every 30 sec
 af2:	4c e2       	ldi	r20, 0x2C	; 44
 af4:	51 e0       	ldi	r21, 0x01	; 1
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	84 e1       	ldi	r24, 0x14	; 20
 afc:	95 e0       	ldi	r25, 0x05	; 5
 afe:	0e 94 cd 00 	call	0x19a	; 0x19a <SCH_Add_Task>
 b02:	88 2f       	mov	r24, r24
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	9e 83       	std	Y+6, r25	; 0x06
 b08:	8d 83       	std	Y+5, r24	; 0x05

	// Test
	SCH_Add_Task(withdrawSunscreen,0,2000);
 b0a:	40 ed       	ldi	r20, 0xD0	; 208
 b0c:	57 e0       	ldi	r21, 0x07	; 7
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	87 ee       	ldi	r24, 0xE7	; 231
 b14:	93 e0       	ldi	r25, 0x03	; 3
 b16:	0e 94 cd 00 	call	0x19a	; 0x19a <SCH_Add_Task>
	SCH_Add_Task(extendSunscreen,1000,2000);
 b1a:	40 ed       	ldi	r20, 0xD0	; 208
 b1c:	57 e0       	ldi	r21, 0x07	; 7
 b1e:	68 ee       	ldi	r22, 0xE8	; 232
 b20:	73 e0       	ldi	r23, 0x03	; 3
 b22:	88 ec       	ldi	r24, 0xC8	; 200
 b24:	92 e0       	ldi	r25, 0x02	; 2
 b26:	0e 94 cd 00 	call	0x19a	; 0x19a <SCH_Add_Task>

	SCH_Start(); // Start scheduler
 b2a:	0e 94 c6 01 	call	0x38c	; 0x38c <SCH_Start>

	while(1) { // Infinite loop
		SCH_Dispatch_Tasks(); // Execute scheduled tasks
 b2e:	0e 94 48 00 	call	0x90	; 0x90 <SCH_Dispatch_Tasks>

		//extendSunscreen();
		//_delay_ms(10000);
		//withdrawSunscreen();
		//_delay_ms(10000);
	} // While loop end
 b32:	fd cf       	rjmp	.-6      	; 0xb2e <main+0xaa>

00000b34 <__cmpsf2>:
 b34:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_cmp>
 b38:	08 f4       	brcc	.+2      	; 0xb3c <__cmpsf2+0x8>
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	08 95       	ret

00000b3e <__fixunssfsi>:
 b3e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_splitA>
 b42:	88 f0       	brcs	.+34     	; 0xb66 <__fixunssfsi+0x28>
 b44:	9f 57       	subi	r25, 0x7F	; 127
 b46:	98 f0       	brcs	.+38     	; 0xb6e <__fixunssfsi+0x30>
 b48:	b9 2f       	mov	r27, r25
 b4a:	99 27       	eor	r25, r25
 b4c:	b7 51       	subi	r27, 0x17	; 23
 b4e:	b0 f0       	brcs	.+44     	; 0xb7c <__fixunssfsi+0x3e>
 b50:	e1 f0       	breq	.+56     	; 0xb8a <__fixunssfsi+0x4c>
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	1a f0       	brmi	.+6      	; 0xb62 <__fixunssfsi+0x24>
 b5c:	ba 95       	dec	r27
 b5e:	c9 f7       	brne	.-14     	; 0xb52 <__fixunssfsi+0x14>
 b60:	14 c0       	rjmp	.+40     	; 0xb8a <__fixunssfsi+0x4c>
 b62:	b1 30       	cpi	r27, 0x01	; 1
 b64:	91 f0       	breq	.+36     	; 0xb8a <__fixunssfsi+0x4c>
 b66:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_zero>
 b6a:	b1 e0       	ldi	r27, 0x01	; 1
 b6c:	08 95       	ret
 b6e:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__fp_zero>
 b72:	67 2f       	mov	r22, r23
 b74:	78 2f       	mov	r23, r24
 b76:	88 27       	eor	r24, r24
 b78:	b8 5f       	subi	r27, 0xF8	; 248
 b7a:	39 f0       	breq	.+14     	; 0xb8a <__fixunssfsi+0x4c>
 b7c:	b9 3f       	cpi	r27, 0xF9	; 249
 b7e:	cc f3       	brlt	.-14     	; 0xb72 <__fixunssfsi+0x34>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b3 95       	inc	r27
 b88:	d9 f7       	brne	.-10     	; 0xb80 <__fixunssfsi+0x42>
 b8a:	3e f4       	brtc	.+14     	; 0xb9a <__fixunssfsi+0x5c>
 b8c:	90 95       	com	r25
 b8e:	80 95       	com	r24
 b90:	70 95       	com	r23
 b92:	61 95       	neg	r22
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <__fp_cmp>:
 b9c:	99 0f       	add	r25, r25
 b9e:	00 08       	sbc	r0, r0
 ba0:	55 0f       	add	r21, r21
 ba2:	aa 0b       	sbc	r26, r26
 ba4:	e0 e8       	ldi	r30, 0x80	; 128
 ba6:	fe ef       	ldi	r31, 0xFE	; 254
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	e8 07       	cpc	r30, r24
 bae:	f9 07       	cpc	r31, r25
 bb0:	c0 f0       	brcs	.+48     	; 0xbe2 <__fp_cmp+0x46>
 bb2:	12 16       	cp	r1, r18
 bb4:	13 06       	cpc	r1, r19
 bb6:	e4 07       	cpc	r30, r20
 bb8:	f5 07       	cpc	r31, r21
 bba:	98 f0       	brcs	.+38     	; 0xbe2 <__fp_cmp+0x46>
 bbc:	62 1b       	sub	r22, r18
 bbe:	73 0b       	sbc	r23, r19
 bc0:	84 0b       	sbc	r24, r20
 bc2:	95 0b       	sbc	r25, r21
 bc4:	39 f4       	brne	.+14     	; 0xbd4 <__fp_cmp+0x38>
 bc6:	0a 26       	eor	r0, r26
 bc8:	61 f0       	breq	.+24     	; 0xbe2 <__fp_cmp+0x46>
 bca:	23 2b       	or	r18, r19
 bcc:	24 2b       	or	r18, r20
 bce:	25 2b       	or	r18, r21
 bd0:	21 f4       	brne	.+8      	; 0xbda <__fp_cmp+0x3e>
 bd2:	08 95       	ret
 bd4:	0a 26       	eor	r0, r26
 bd6:	09 f4       	brne	.+2      	; 0xbda <__fp_cmp+0x3e>
 bd8:	a1 40       	sbci	r26, 0x01	; 1
 bda:	a6 95       	lsr	r26
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	81 1d       	adc	r24, r1
 be0:	81 1d       	adc	r24, r1
 be2:	08 95       	ret

00000be4 <__fp_split3>:
 be4:	57 fd       	sbrc	r21, 7
 be6:	90 58       	subi	r25, 0x80	; 128
 be8:	44 0f       	add	r20, r20
 bea:	55 1f       	adc	r21, r21
 bec:	59 f0       	breq	.+22     	; 0xc04 <__fp_splitA+0x10>
 bee:	5f 3f       	cpi	r21, 0xFF	; 255
 bf0:	71 f0       	breq	.+28     	; 0xc0e <__fp_splitA+0x1a>
 bf2:	47 95       	ror	r20

00000bf4 <__fp_splitA>:
 bf4:	88 0f       	add	r24, r24
 bf6:	97 fb       	bst	r25, 7
 bf8:	99 1f       	adc	r25, r25
 bfa:	61 f0       	breq	.+24     	; 0xc14 <__fp_splitA+0x20>
 bfc:	9f 3f       	cpi	r25, 0xFF	; 255
 bfe:	79 f0       	breq	.+30     	; 0xc1e <__fp_splitA+0x2a>
 c00:	87 95       	ror	r24
 c02:	08 95       	ret
 c04:	12 16       	cp	r1, r18
 c06:	13 06       	cpc	r1, r19
 c08:	14 06       	cpc	r1, r20
 c0a:	55 1f       	adc	r21, r21
 c0c:	f2 cf       	rjmp	.-28     	; 0xbf2 <__fp_split3+0xe>
 c0e:	46 95       	lsr	r20
 c10:	f1 df       	rcall	.-30     	; 0xbf4 <__fp_splitA>
 c12:	08 c0       	rjmp	.+16     	; 0xc24 <__fp_splitA+0x30>
 c14:	16 16       	cp	r1, r22
 c16:	17 06       	cpc	r1, r23
 c18:	18 06       	cpc	r1, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	f1 cf       	rjmp	.-30     	; 0xc00 <__fp_splitA+0xc>
 c1e:	86 95       	lsr	r24
 c20:	71 05       	cpc	r23, r1
 c22:	61 05       	cpc	r22, r1
 c24:	08 94       	sec
 c26:	08 95       	ret

00000c28 <__fp_zero>:
 c28:	e8 94       	clt

00000c2a <__fp_szero>:
 c2a:	bb 27       	eor	r27, r27
 c2c:	66 27       	eor	r22, r22
 c2e:	77 27       	eor	r23, r23
 c30:	cb 01       	movw	r24, r22
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__gesf2>:
 c36:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_cmp>
 c3a:	08 f4       	brcc	.+2      	; 0xc3e <__gesf2+0x8>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	08 95       	ret

00000c40 <__mulsf3>:
 c40:	0e 94 33 06 	call	0xc66	; 0xc66 <__mulsf3x>
 c44:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_round>
 c48:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscA>
 c4c:	38 f0       	brcs	.+14     	; 0xc5c <__mulsf3+0x1c>
 c4e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_pscB>
 c52:	20 f0       	brcs	.+8      	; 0xc5c <__mulsf3+0x1c>
 c54:	95 23       	and	r25, r21
 c56:	11 f0       	breq	.+4      	; 0xc5c <__mulsf3+0x1c>
 c58:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
 c5c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_nan>
 c60:	11 24       	eor	r1, r1
 c62:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>

00000c66 <__mulsf3x>:
 c66:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_split3>
 c6a:	70 f3       	brcs	.-36     	; 0xc48 <__mulsf3+0x8>

00000c6c <__mulsf3_pse>:
 c6c:	95 9f       	mul	r25, r21
 c6e:	c1 f3       	breq	.-16     	; 0xc60 <__mulsf3+0x20>
 c70:	95 0f       	add	r25, r21
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	55 1f       	adc	r21, r21
 c76:	62 9f       	mul	r22, r18
 c78:	f0 01       	movw	r30, r0
 c7a:	72 9f       	mul	r23, r18
 c7c:	bb 27       	eor	r27, r27
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	63 9f       	mul	r22, r19
 c84:	aa 27       	eor	r26, r26
 c86:	f0 0d       	add	r31, r0
 c88:	b1 1d       	adc	r27, r1
 c8a:	aa 1f       	adc	r26, r26
 c8c:	64 9f       	mul	r22, r20
 c8e:	66 27       	eor	r22, r22
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	66 1f       	adc	r22, r22
 c96:	82 9f       	mul	r24, r18
 c98:	22 27       	eor	r18, r18
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	73 9f       	mul	r23, r19
 ca2:	b0 0d       	add	r27, r0
 ca4:	a1 1d       	adc	r26, r1
 ca6:	62 1f       	adc	r22, r18
 ca8:	83 9f       	mul	r24, r19
 caa:	a0 0d       	add	r26, r0
 cac:	61 1d       	adc	r22, r1
 cae:	22 1f       	adc	r18, r18
 cb0:	74 9f       	mul	r23, r20
 cb2:	33 27       	eor	r19, r19
 cb4:	a0 0d       	add	r26, r0
 cb6:	61 1d       	adc	r22, r1
 cb8:	23 1f       	adc	r18, r19
 cba:	84 9f       	mul	r24, r20
 cbc:	60 0d       	add	r22, r0
 cbe:	21 1d       	adc	r18, r1
 cc0:	82 2f       	mov	r24, r18
 cc2:	76 2f       	mov	r23, r22
 cc4:	6a 2f       	mov	r22, r26
 cc6:	11 24       	eor	r1, r1
 cc8:	9f 57       	subi	r25, 0x7F	; 127
 cca:	50 40       	sbci	r21, 0x00	; 0
 ccc:	9a f0       	brmi	.+38     	; 0xcf4 <__mulsf3_pse+0x88>
 cce:	f1 f0       	breq	.+60     	; 0xd0c <__mulsf3_pse+0xa0>
 cd0:	88 23       	and	r24, r24
 cd2:	4a f0       	brmi	.+18     	; 0xce6 <__mulsf3_pse+0x7a>
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	bb 1f       	adc	r27, r27
 cda:	66 1f       	adc	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__mulsf3_pse+0x64>
 ce6:	9e 3f       	cpi	r25, 0xFE	; 254
 ce8:	51 05       	cpc	r21, r1
 cea:	80 f0       	brcs	.+32     	; 0xd0c <__mulsf3_pse+0xa0>
 cec:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_inf>
 cf0:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_szero>
 cf4:	5f 3f       	cpi	r21, 0xFF	; 255
 cf6:	e4 f3       	brlt	.-8      	; 0xcf0 <__mulsf3_pse+0x84>
 cf8:	98 3e       	cpi	r25, 0xE8	; 232
 cfa:	d4 f3       	brlt	.-12     	; 0xcf0 <__mulsf3_pse+0x84>
 cfc:	86 95       	lsr	r24
 cfe:	77 95       	ror	r23
 d00:	67 95       	ror	r22
 d02:	b7 95       	ror	r27
 d04:	f7 95       	ror	r31
 d06:	e7 95       	ror	r30
 d08:	9f 5f       	subi	r25, 0xFF	; 255
 d0a:	c1 f7       	brne	.-16     	; 0xcfc <__mulsf3_pse+0x90>
 d0c:	fe 2b       	or	r31, r30
 d0e:	88 0f       	add	r24, r24
 d10:	91 1d       	adc	r25, r1
 d12:	96 95       	lsr	r25
 d14:	87 95       	ror	r24
 d16:	97 f9       	bld	r25, 7
 d18:	08 95       	ret

00000d1a <__fp_inf>:
 d1a:	97 f9       	bld	r25, 7
 d1c:	9f 67       	ori	r25, 0x7F	; 127
 d1e:	80 e8       	ldi	r24, 0x80	; 128
 d20:	70 e0       	ldi	r23, 0x00	; 0
 d22:	60 e0       	ldi	r22, 0x00	; 0
 d24:	08 95       	ret

00000d26 <__fp_nan>:
 d26:	9f ef       	ldi	r25, 0xFF	; 255
 d28:	80 ec       	ldi	r24, 0xC0	; 192
 d2a:	08 95       	ret

00000d2c <__fp_pscA>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	16 16       	cp	r1, r22
 d32:	17 06       	cpc	r1, r23
 d34:	18 06       	cpc	r1, r24
 d36:	09 06       	cpc	r0, r25
 d38:	08 95       	ret

00000d3a <__fp_pscB>:
 d3a:	00 24       	eor	r0, r0
 d3c:	0a 94       	dec	r0
 d3e:	12 16       	cp	r1, r18
 d40:	13 06       	cpc	r1, r19
 d42:	14 06       	cpc	r1, r20
 d44:	05 06       	cpc	r0, r21
 d46:	08 95       	ret

00000d48 <__fp_round>:
 d48:	09 2e       	mov	r0, r25
 d4a:	03 94       	inc	r0
 d4c:	00 0c       	add	r0, r0
 d4e:	11 f4       	brne	.+4      	; 0xd54 <__fp_round+0xc>
 d50:	88 23       	and	r24, r24
 d52:	52 f0       	brmi	.+20     	; 0xd68 <__fp_round+0x20>
 d54:	bb 0f       	add	r27, r27
 d56:	40 f4       	brcc	.+16     	; 0xd68 <__fp_round+0x20>
 d58:	bf 2b       	or	r27, r31
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0x18>
 d5c:	60 ff       	sbrs	r22, 0
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__fp_round+0x20>
 d60:	6f 5f       	subi	r22, 0xFF	; 255
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
